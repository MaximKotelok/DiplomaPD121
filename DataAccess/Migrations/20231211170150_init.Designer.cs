// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231211170150_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<int?>("ParentCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.HasIndex("ParentCategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            Title = "Каталог Товарів"
                        },
                        new
                        {
                            CategoryID = 2,
                            ParentCategoryID = 1,
                            Title = "Ліки та профілактичні засоби"
                        },
                        new
                        {
                            CategoryID = 3,
                            ParentCategoryID = 2,
                            Title = "Вітаміни"
                        },
                        new
                        {
                            CategoryID = 4,
                            ParentCategoryID = 3,
                            Title = "Вітамін С"
                        },
                        new
                        {
                            CategoryID = 5,
                            ParentCategoryID = 4,
                            Title = "Аскорбінка"
                        },
                        new
                        {
                            CategoryID = 6,
                            ParentCategoryID = 5,
                            Title = "Аскорбінка-КВ"
                        });
                });

            modelBuilder.Entity("Models.ConcreteProduct", b =>
                {
                    b.Property<int>("ConcreteProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConcreteProductID"));

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ConcreteProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("ConcreteProducts");

                    b.HasData(
                        new
                        {
                            ConcreteProductID = 1,
                            Price = 100.0,
                            ProductID = 1,
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("Models.PharmaCompany", b =>
                {
                    b.Property<int>("PharmaCompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PharmaCompanyID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PharmaCompanyID");

                    b.ToTable("PharmaCompanies");

                    b.HasData(
                        new
                        {
                            PharmaCompanyID = 1,
                            Description = "АНЦ.",
                            Title = "АНЦ"
                        });
                });

            modelBuilder.Entity("Models.Pharmacy", b =>
                {
                    b.Property<int>("PharmacyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PharmacyID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Coord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PharmaCompanyID")
                        .HasColumnType("int");

                    b.HasKey("PharmacyID");

                    b.HasIndex("PharmaCompanyID");

                    b.ToTable("Pharmacies");

                    b.HasData(
                        new
                        {
                            PharmacyID = 1,
                            Address = "Temp Address",
                            Coord = "Temp Coord",
                            PharmaCompanyID = 1
                        });
                });

            modelBuilder.Entity("Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Product");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Models.Medicines", b =>
                {
                    b.HasBaseType("Models.Product");

                    b.Property<string>("SpecialRow")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            CategoryID = 6,
                            Description = "Аскорбінка.",
                            Title = "Аскорбінка",
                            SpecialRow = "Special Temp Row"
                        });
                });

            modelBuilder.Entity("Models.Category", b =>
                {
                    b.HasOne("Models.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryID");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Models.ConcreteProduct", b =>
                {
                    b.HasOne("Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Models.Pharmacy", b =>
                {
                    b.HasOne("Models.PharmaCompany", "PharmaCompany")
                        .WithMany()
                        .HasForeignKey("PharmaCompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PharmaCompany");
                });

            modelBuilder.Entity("Models.Product", b =>
                {
                    b.HasOne("Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Models.Medicines", b =>
                {
                    b.HasOne("Models.Product", null)
                        .WithOne()
                        .HasForeignKey("Models.Medicines", "ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
