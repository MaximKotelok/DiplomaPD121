// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240114102022_AddOneToOneUserToPharmacy")]
    partial class AddOneToOneUserToPharmacy
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.ActiveSubstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActiveSubstances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "аскорбінова кислота"
                        });
                });

            modelBuilder.Entity("Domain.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountryBrandID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryBrandID");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryBrandID = 3,
                            Name = "Brand 1"
                        },
                        new
                        {
                            Id = 2,
                            CountryBrandID = 3,
                            Name = "Brand 2"
                        },
                        new
                        {
                            Id = 3,
                            CountryBrandID = 1,
                            Description = "Best brand",
                            Name = "Brand 3"
                        });
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ParentCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isActual")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Каталог Товарів"
                        },
                        new
                        {
                            Id = 2,
                            ParentCategoryID = 1,
                            Title = "Ліки та профілактичні засоби"
                        },
                        new
                        {
                            Id = 3,
                            ParentCategoryID = 2,
                            Title = "Вітаміни"
                        },
                        new
                        {
                            Id = 4,
                            ParentCategoryID = 3,
                            Title = "Вітамін С"
                        },
                        new
                        {
                            Id = 5,
                            ParentCategoryID = 4,
                            Title = "Аскорбінка"
                        },
                        new
                        {
                            Id = 6,
                            ParentCategoryID = 5,
                            Title = "Аскорбінка-КВ"
                        });
                });

            modelBuilder.Entity("Domain.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Citys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Latitude = "213213",
                            Longitude = "214124124",
                            NameCity = "Львів"
                        });
                });

            modelBuilder.Entity("Domain.Models.ConcreteProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PharmacyID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyID");

                    b.HasIndex("ProductID");

                    b.ToTable("ConcreteProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PharmacyID = 1,
                            Price = 100.0,
                            ProductID = 1,
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("Domain.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 3,
                            Name = "USA"
                        });
                });

            modelBuilder.Entity("Domain.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryManufactureID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URLSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryManufactureID");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Some address 1",
                            CountryManufactureID = 3,
                            Name = "Manufacturer 1",
                            URLSite = "google.com"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Some address 2",
                            CountryManufactureID = 2,
                            Name = "Manufacturer 2",
                            URLSite = "google.com"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Some address 3",
                            CountryManufactureID = 1,
                            Name = "Manufacturer 3",
                            URLSite = "google.com"
                        });
                });

            modelBuilder.Entity("Domain.Models.PharmaCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PharmaCompanies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "АНЦ.",
                            Title = "АНЦ"
                        });
                });

            modelBuilder.Entity("Domain.Models.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PharmaCompanyID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityID");

                    b.HasIndex("PharmaCompanyID");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Pharmacies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Temp Address",
                            CityID = 1,
                            Latitude = "49.842957",
                            Longitude = "24.031511",
                            PharmaCompanyID = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "Temp Address2",
                            CityID = 1,
                            Latitude = "49.842757",
                            Longitude = "24.031211",
                            PharmaCompanyID = 1
                        },
                        new
                        {
                            Id = 3,
                            Address = "Temp Address3",
                            CityID = 1,
                            Latitude = "49.842157",
                            Longitude = "24.031611",
                            PharmaCompanyID = 1
                        },
                        new
                        {
                            Id = 4,
                            Address = "Temp Address4",
                            CityID = 1,
                            Latitude = "49.842557",
                            Longitude = "24.031411",
                            PharmaCompanyID = 1
                        });
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManufacturerID")
                        .HasColumnType("int");

                    b.Property<string>("PathToPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SimilarProductGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ManufacturerID");

                    b.HasIndex("SeriesId");

                    b.HasIndex("SimilarProductGroupId");

                    b.ToTable("Products");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Models.ProductAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductAttributeGroupID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeGroupID");

                    b.ToTable("Attributes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Index = 1,
                            Name = "Види тварин",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 2,
                            Index = 2,
                            Name = "Вага",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 3,
                            Index = 3,
                            Name = "Тип іграшки",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 4,
                            Index = 4,
                            Name = "Матеріал виготовлення",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 5,
                            Index = 5,
                            Name = "Додаткові функції",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 6,
                            Index = 6,
                            Name = "Призначення",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 7,
                            Index = 7,
                            Name = "Серія/Лінійка",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 8,
                            Index = 8,
                            Name = "Об'єм",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 9,
                            Index = 9,
                            Name = "Вік тварини",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 10,
                            Index = 10,
                            Name = "Розмір",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 11,
                            Index = 11,
                            Name = "Дозування (ветеринарія)",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 12,
                            Index = 12,
                            Name = "Діюча речовина (ветеринарія)",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 13,
                            Index = 13,
                            Name = "Вага тварини",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 14,
                            Index = 14,
                            Name = "Клас корму",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 15,
                            Index = 15,
                            Name = "Інгредієнти",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 16,
                            Index = 16,
                            Name = "Розмір тварини",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 17,
                            Index = 17,
                            Name = "Тип корму",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 18,
                            Index = 18,
                            Name = "Довжина",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 19,
                            Index = 19,
                            Name = "Ширина",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 20,
                            Index = 20,
                            Name = "Особливість",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 21,
                            Index = 21,
                            Name = "Колір",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 22,
                            Index = 22,
                            Name = "Максимальне навантаження",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 23,
                            Index = 23,
                            Name = "Тип",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 24,
                            Index = 24,
                            Name = "Тип туалету",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 25,
                            Index = 25,
                            Name = "Види риб",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 26,
                            Index = 26,
                            Name = "Вид наповнювача за складом",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 27,
                            Index = 27,
                            Name = "Види тварин",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 28,
                            Index = 28,
                            Name = "Види птахів",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 30,
                            Index = 1,
                            Name = "Гарантія виробника",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 31,
                            Index = 2,
                            Name = "Тип",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 32,
                            Index = 3,
                            Name = "Колір",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 33,
                            Index = 4,
                            Name = "Ступінь втрати слуху",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 34,
                            Index = 5,
                            Name = "Характеристики",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 35,
                            Index = 6,
                            Name = "Тип вимірювання",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 36,
                            Index = 7,
                            Name = "Різновид інгаляторів",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 37,
                            Index = 8,
                            Name = "Тип вимірювання тиску",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 38,
                            Index = 9,
                            Name = "Розмір манжети",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 39,
                            Index = 10,
                            Name = "Властивості",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 40,
                            Index = 11,
                            Name = "Зовнішній діаметр голки, мм",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 41,
                            Index = 12,
                            Name = "Довжина голки",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 42,
                            Index = 13,
                            Name = "Зовнішній діаметр голки, мм",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 43,
                            Index = 14,
                            Name = "Концентрація інсуліна (U)",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 44,
                            Index = 15,
                            Name = "Тип голки в комплекті",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 45,
                            Index = 16,
                            Name = "Кількість елементів",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 46,
                            Index = 17,
                            Name = "Термін використання",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 47,
                            Index = 18,
                            Name = "Вимірювання показників",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 49,
                            Index = 19,
                            Name = "Обсяг забору крові",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 50,
                            Index = 20,
                            Name = "Калібрування",
                            ProductAttributeGroupID = 4
                        });
                });

            modelBuilder.Entity("Domain.Models.ProductAttributeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductAttributeGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Загальні"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Таблетки"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Товари для тварин"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Медична техніка"
                        });
                });

            modelBuilder.Entity("Domain.Models.ProductProperty", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Domain.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConcreteProductID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToGetReservationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ConcreteProductID");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Domain.Models.ReservationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReservationStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "В очікуванні"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Підтверджено"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Скасовано"
                        },
                        new
                        {
                            Id = 4,
                            Status = "Завершено"
                        });
                });

            modelBuilder.Entity("Domain.Models.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Series");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Some desc",
                            Title = "Some title"
                        });
                });

            modelBuilder.Entity("Domain.Models.SimilarProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SimilarBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SimilarProductGroups");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Medicine", b =>
                {
                    b.HasBaseType("Domain.Models.Product");

                    b.Property<int>("ActiveSubstanceID")
                        .HasColumnType("int");

                    b.HasIndex("ActiveSubstanceID");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 3,
                            CategoryID = 6,
                            Description = "Аскорбінка.",
                            ManufacturerID = 3,
                            PathToPhoto = "/images/product/787f9b1f-f81c-4089-9382-57fd0cf0be15.webp",
                            SeriesId = 1,
                            ShortDescription = "таблетки зі смак. полун. по 25 мг №10 в етикет.",
                            Title = "Аскорбінка",
                            ActiveSubstanceID = 1
                        });
                });

            modelBuilder.Entity("Domain.Models.Brand", b =>
                {
                    b.HasOne("Domain.Models.Country", "CountryBrand")
                        .WithMany()
                        .HasForeignKey("CountryBrandID");

                    b.Navigation("CountryBrand");
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.HasOne("Domain.Models.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryID");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Domain.Models.ConcreteProduct", b =>
                {
                    b.HasOne("Domain.Models.Pharmacy", "Pharmacy")
                        .WithMany("ConcreteProducts")
                        .HasForeignKey("PharmacyID");

                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany("ConcreteProducts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Models.Manufacturer", b =>
                {
                    b.HasOne("Domain.Models.Country", "CountryManufacture")
                        .WithMany()
                        .HasForeignKey("CountryManufactureID");

                    b.Navigation("CountryManufacture");
                });

            modelBuilder.Entity("Domain.Models.Pharmacy", b =>
                {
                    b.HasOne("Domain.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.PharmaCompany", "PharmaCompany")
                        .WithMany()
                        .HasForeignKey("PharmaCompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "User")
                        .WithOne("Pharmacy")
                        .HasForeignKey("Domain.Models.Pharmacy", "UserId");

                    b.Navigation("City");

                    b.Navigation("PharmaCompany");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.HasOne("Domain.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("Domain.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID");

                    b.HasOne("Domain.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerID");

                    b.HasOne("Domain.Models.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId");

                    b.HasOne("Domain.Models.SimilarProductGroup", "SimilarProductGroup")
                        .WithMany("Products")
                        .HasForeignKey("SimilarProductGroupId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Manufacturer");

                    b.Navigation("Series");

                    b.Navigation("SimilarProductGroup");
                });

            modelBuilder.Entity("Domain.Models.ProductAttribute", b =>
                {
                    b.HasOne("Domain.Models.ProductAttributeGroup", "ProductAttributeGroup")
                        .WithMany("AttributesInGroup")
                        .HasForeignKey("ProductAttributeGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductAttributeGroup");
                });

            modelBuilder.Entity("Domain.Models.ProductProperty", b =>
                {
                    b.HasOne("Domain.Models.ProductAttribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany("Properties")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Models.Reservation", b =>
                {
                    b.HasOne("Domain.Models.ConcreteProduct", "ConcreteProduct")
                        .WithMany()
                        .HasForeignKey("ConcreteProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.ReservationStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConcreteProduct");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Medicine", b =>
                {
                    b.HasOne("Domain.Models.ActiveSubstance", "ActiveSubstance")
                        .WithMany("Medicines")
                        .HasForeignKey("ActiveSubstanceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("Domain.Models.Medicine", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveSubstance");
                });

            modelBuilder.Entity("Domain.Models.ActiveSubstance", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Domain.Models.Pharmacy", b =>
                {
                    b.Navigation("ConcreteProducts");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Navigation("ConcreteProducts");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Domain.Models.ProductAttributeGroup", b =>
                {
                    b.Navigation("AttributesInGroup");
                });

            modelBuilder.Entity("Domain.Models.SimilarProductGroup", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("Pharmacy");
                });
#pragma warning restore 612, 618
        }
    }
}
