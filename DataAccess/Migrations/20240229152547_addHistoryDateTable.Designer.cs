// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240229152547_addHistoryDateTable")]
    partial class addHistoryDateTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConcreteProductReservation", b =>
                {
                    b.Property<int>("ConcreteProductsId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationsId")
                        .HasColumnType("int");

                    b.HasKey("ConcreteProductsId", "ReservationsId");

                    b.HasIndex("ReservationsId");

                    b.ToTable("ConcreteProductReservation");
                });

            modelBuilder.Entity("Domain.Models.ActiveSubstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActiveSubstances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "аскорбінова кислота"
                        },
                        new
                        {
                            Id = 2,
                            Title = "парацетамол"
                        },
                        new
                        {
                            Id = 3,
                            Title = "кофеїн"
                        },
                        new
                        {
                            Id = 4,
                            Title = "ацетилсаліцилова кислота"
                        });
                });

            modelBuilder.Entity("Domain.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountryBrandID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathToPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryBrandID");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryBrandID = 3,
                            Name = "Brand 1",
                            PathToPhoto = "/images/brand/Brand 1.png"
                        },
                        new
                        {
                            Id = 2,
                            CountryBrandID = 3,
                            Name = "Brand 2",
                            PathToPhoto = "/images/brand/Brand 2.png"
                        },
                        new
                        {
                            Id = 3,
                            CountryBrandID = 1,
                            Description = "Best brand",
                            Name = "Brand 3",
                            PathToPhoto = "/images/brand/Brand 3.png"
                        });
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("CanHasProducts")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRecomended")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("PathToPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubCategoriesTypeOfPhoto")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanHasProducts = false,
                            PathToPhoto = "",
                            SubCategoriesTypeOfPhoto = 0,
                            Title = "Каталог Товарів"
                        },
                        new
                        {
                            Id = 2,
                            CanHasProducts = false,
                            ParentCategoryID = 1,
                            PathToPhoto = "/images/category/icon/Medicines.png",
                            SubCategoriesTypeOfPhoto = 3,
                            Title = "Ліки та профілактичні засоби"
                        },
                        new
                        {
                            Id = 3,
                            CanHasProducts = false,
                            IsRecomended = true,
                            ParentCategoryID = 2,
                            SubCategoriesTypeOfPhoto = 1,
                            Title = "Вітаміни"
                        },
                        new
                        {
                            Id = 4,
                            CanHasProducts = true,
                            ParentCategoryID = 3,
                            PathToPhoto = "/images/category/png/C.png",
                            Title = "Вітамін С"
                        },
                        new
                        {
                            Id = 5,
                            CanHasProducts = false,
                            ParentCategoryID = 4,
                            Title = "Аскорбінка"
                        },
                        new
                        {
                            Id = 6,
                            CanHasProducts = false,
                            ParentCategoryID = 5,
                            Title = "Аскорбінка-КВ"
                        },
                        new
                        {
                            Id = 7,
                            CanHasProducts = false,
                            ParentCategoryID = 1,
                            PathToPhoto = "/images/category/icon/Vitamines.png",
                            Title = "Вітаміни та мінерали"
                        },
                        new
                        {
                            Id = 8,
                            CanHasProducts = false,
                            ParentCategoryID = 1,
                            PathToPhoto = "/images/category/icon/Care.png",
                            Title = "Краса та догляд"
                        },
                        new
                        {
                            Id = 9,
                            CanHasProducts = false,
                            ParentCategoryID = 1,
                            PathToPhoto = "/images/category/icon/Sport.png",
                            Title = "Спорт та здоров'я"
                        },
                        new
                        {
                            Id = 10,
                            CanHasProducts = false,
                            ParentCategoryID = 1,
                            PathToPhoto = "/images/category/icon/Kids.png",
                            Title = "Товари для дітей та мам"
                        },
                        new
                        {
                            Id = 11,
                            CanHasProducts = false,
                            ParentCategoryID = 1,
                            PathToPhoto = "/images/category/icon/Medicine staff.png",
                            Title = "Вироби медичного призначення"
                        },
                        new
                        {
                            Id = 12,
                            CanHasProducts = false,
                            ParentCategoryID = 1,
                            PathToPhoto = "/images/category/icon/Reabilitation.png",
                            Title = "Ортопедія та реабілітація"
                        },
                        new
                        {
                            Id = 13,
                            CanHasProducts = false,
                            ParentCategoryID = 1,
                            PathToPhoto = "/images/category/icon/Medicine technic.png",
                            Title = "Медична техніка"
                        },
                        new
                        {
                            Id = 14,
                            CanHasProducts = false,
                            ParentCategoryID = 1,
                            PathToPhoto = "/images/category/icon/Animals.png",
                            Title = "Товари для тварин"
                        },
                        new
                        {
                            Id = 15,
                            CanHasProducts = true,
                            ParentCategoryID = 14,
                            Title = "Тонометри"
                        },
                        new
                        {
                            Id = 16,
                            CanHasProducts = true,
                            ParentCategoryID = 14,
                            Title = "Глюкометри"
                        },
                        new
                        {
                            Id = 17,
                            CanHasProducts = true,
                            ParentCategoryID = 3,
                            PathToPhoto = "/images/category/png/B.png",
                            Title = "Вітаміни групи В"
                        },
                        new
                        {
                            Id = 18,
                            CanHasProducts = true,
                            ParentCategoryID = 3,
                            PathToPhoto = "/images/category/png/Biotin.png",
                            Title = "Біотин"
                        },
                        new
                        {
                            Id = 19,
                            CanHasProducts = true,
                            ParentCategoryID = 3,
                            PathToPhoto = "/images/category/png/D.png",
                            Title = "Вітамін D"
                        },
                        new
                        {
                            Id = 20,
                            CanHasProducts = true,
                            ParentCategoryID = 3,
                            PathToPhoto = "/images/category/png/K.png",
                            Title = "Вітамін К"
                        });
                });

            modelBuilder.Entity("Domain.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Citys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Latitude = "49.842957",
                            Longitude = "24.031111",
                            NameCity = "Львів"
                        });
                });

            modelBuilder.Entity("Domain.Models.ConcreteProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PharmacyID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyID");

                    b.HasIndex("ProductID");

                    b.ToTable("ConcreteProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PharmacyID = 1,
                            Price = 100.0,
                            ProductID = 1,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 2,
                            PharmacyID = 2,
                            Price = 10.0,
                            ProductID = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 3,
                            PharmacyID = 3,
                            Price = 20.0,
                            ProductID = 2,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 4,
                            PharmacyID = 2,
                            Price = 30.0,
                            ProductID = 2,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 5,
                            PharmacyID = 1,
                            Price = 40.0,
                            ProductID = 3,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 6,
                            PharmacyID = 2,
                            Price = 50.0,
                            ProductID = 3,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 7,
                            PharmacyID = 3,
                            Price = 25.0,
                            ProductID = 4,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 8,
                            PharmacyID = 2,
                            Price = 125.0,
                            ProductID = 4,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 9,
                            PharmacyID = 2,
                            Price = 105.0,
                            ProductID = 5,
                            Quantity = 15
                        },
                        new
                        {
                            Id = 10,
                            PharmacyID = 1,
                            Price = 80.0,
                            ProductID = 5,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 11,
                            PharmacyID = 4,
                            Price = 230.0,
                            ProductID = 6,
                            Quantity = 6
                        });
                });

            modelBuilder.Entity("Domain.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 3,
                            Name = "USA"
                        });
                });

            modelBuilder.Entity("Domain.Models.HistoryDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("HistoryDates");
                });

            modelBuilder.Entity("Domain.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryManufactureID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URLSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryManufactureID");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Some address 1",
                            CountryManufactureID = 3,
                            Name = "Manufacturer 1",
                            URLSite = "google.com"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Some address 2",
                            CountryManufactureID = 2,
                            Name = "Manufacturer 2",
                            URLSite = "google.com"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Some address 3",
                            CountryManufactureID = 1,
                            Name = "Manufacturer 3",
                            URLSite = "google.com"
                        });
                });

            modelBuilder.Entity("Domain.Models.PermissionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PermissionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "заборонено"
                        },
                        new
                        {
                            Id = 2,
                            Title = "дозволено"
                        },
                        new
                        {
                            Id = 3,
                            Title = "за призначенням лікаря"
                        },
                        new
                        {
                            Id = 4,
                            Title = "з обережністю"
                        });
                });

            modelBuilder.Entity("Domain.Models.PharmaCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PharmaCompanies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "АНЦ.",
                            Title = "АНЦ"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Подорожник.",
                            Title = "Подорожник"
                        });
                });

            modelBuilder.Entity("Domain.Models.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PharmaCompanyID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityID");

                    b.HasIndex("PharmaCompanyID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("Pharmacies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Temp Address",
                            CityID = 1,
                            Latitude = "49.842957",
                            Longitude = "24.031511",
                            PharmaCompanyID = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "Temp Address2",
                            CityID = 1,
                            Latitude = "49.842757",
                            Longitude = "24.031211",
                            PharmaCompanyID = 1
                        },
                        new
                        {
                            Id = 3,
                            Address = "Temp Address3",
                            CityID = 1,
                            Latitude = "49.842157",
                            Longitude = "24.031611",
                            PharmaCompanyID = 1
                        },
                        new
                        {
                            Id = 4,
                            Address = "Temp Address4",
                            CityID = 1,
                            Latitude = "49.842557",
                            Longitude = "24.031411",
                            PharmaCompanyID = 1
                        });
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandID")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManufacturerID")
                        .HasColumnType("int");

                    b.Property<string>("PathToPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductAttributeGroupID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductConfirmID")
                        .HasColumnType("int");

                    b.Property<int?>("SeriesID")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ManufacturerID");

                    b.HasIndex("ProductAttributeGroupID");

                    b.HasIndex("ProductConfirmID")
                        .IsUnique()
                        .HasFilter("[ProductConfirmID] IS NOT NULL");

                    b.HasIndex("SeriesID");

                    b.ToTable("Products");

                    b.UseTptMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 5,
                            BrandID = 3,
                            CategoryID = 15,
                            Description = "..",
                            ManufacturerID = 3,
                            PathToPhoto = "/images/product/Тонометр.jpg",
                            ProductAttributeGroupID = 4,
                            SeriesID = 1,
                            ShortDescription = "Медхауз Свіс ГмбХ, ТОВ",
                            Title = "Тонометр ProMedica Classic автоматичний"
                        },
                        new
                        {
                            Id = 6,
                            BrandID = 3,
                            CategoryID = 16,
                            Description = "..",
                            ManufacturerID = 3,
                            PathToPhoto = "/images/product/Глюкометр.jpg",
                            ProductAttributeGroupID = 4,
                            SeriesID = 1,
                            ShortDescription = "Infopia Co. Ltd.",
                            Title = "Глюкометр GluNeo Lite"
                        },
                        new
                        {
                            Id = 7,
                            BrandID = 3,
                            CategoryID = 15,
                            Description = "Точний та швидкий термометр для вимірювання температури",
                            ManufacturerID = 2,
                            ProductAttributeGroupID = 2,
                            SeriesID = 1,
                            ShortDescription = "Medical Devices Corp.",
                            Title = "Термометр для аптек"
                        },
                        new
                        {
                            Id = 8,
                            BrandID = 3,
                            CategoryID = 16,
                            Description = "Ефективний антисептик для регулярного використання",
                            ManufacturerID = 2,
                            ProductAttributeGroupID = 2,
                            SeriesID = 1,
                            ShortDescription = "Hygiene Solutions Ltd.",
                            Title = "Антисептик для рук"
                        },
                        new
                        {
                            Id = 9,
                            BrandID = 2,
                            CategoryID = 15,
                            Description = "Комплект для першої допомоги з необхідним медичним обладнанням",
                            ManufacturerID = 2,
                            ProductAttributeGroupID = 4,
                            SeriesID = 1,
                            ShortDescription = "Safety First Medical",
                            Title = "Перший допоміжний набір"
                        },
                        new
                        {
                            Id = 10,
                            BrandID = 2,
                            CategoryID = 16,
                            Description = "Одноразова медична маска для захисту від бактерій та вірусів",
                            ManufacturerID = 1,
                            ProductAttributeGroupID = 4,
                            SeriesID = 1,
                            ShortDescription = "Protective Gear Co.",
                            Title = "Маска медична"
                        },
                        new
                        {
                            Id = 11,
                            BrandID = 1,
                            CategoryID = 14,
                            Description = "Ефективні таблетки для лікування та профілактики грипу",
                            ManufacturerID = 2,
                            ProductAttributeGroupID = 4,
                            SeriesID = 1,
                            ShortDescription = "Health Pharmaceuticals",
                            Title = "Антигрипові таблетки"
                        },
                        new
                        {
                            Id = 12,
                            BrandID = 3,
                            CategoryID = 15,
                            Description = "Додатковий вітамін С для підтримки імунітету",
                            ManufacturerID = 1,
                            ProductAttributeGroupID = 4,
                            SeriesID = 1,
                            ShortDescription = "NutriWellness Labs",
                            Title = "Вітамін С"
                        });
                });

            modelBuilder.Entity("Domain.Models.ProductAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductAttributeGroupID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeGroupID");

                    b.ToTable("Attributes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Index = 1,
                            Name = "Види тварин",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 2,
                            Index = 2,
                            Name = "Вага",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 3,
                            Index = 3,
                            Name = "Тип іграшки",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 4,
                            Index = 4,
                            Name = "Матеріал виготовлення",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 5,
                            Index = 5,
                            Name = "Додаткові функції",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 6,
                            Index = 6,
                            Name = "Призначення",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 7,
                            Index = 7,
                            Name = "Серія/Лінійка",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 8,
                            Index = 8,
                            Name = "Об'єм",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 9,
                            Index = 9,
                            Name = "Вік тварини",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 10,
                            Index = 10,
                            Name = "Розмір",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 11,
                            Index = 11,
                            Name = "Дозування (ветеринарія)",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 12,
                            Index = 12,
                            Name = "Діюча речовина (ветеринарія)",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 13,
                            Index = 13,
                            Name = "Вага тварини",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 14,
                            Index = 14,
                            Name = "Клас корму",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 15,
                            Index = 15,
                            Name = "Інгредієнти",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 16,
                            Index = 16,
                            Name = "Розмір тварини",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 17,
                            Index = 17,
                            Name = "Тип корму",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 18,
                            Index = 18,
                            Name = "Довжина",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 19,
                            Index = 19,
                            Name = "Ширина",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 20,
                            Index = 20,
                            Name = "Особливість",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 21,
                            Index = 21,
                            Name = "Колір",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 22,
                            Index = 22,
                            Name = "Максимальне навантаження",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 23,
                            Index = 23,
                            Name = "Тип",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 24,
                            Index = 24,
                            Name = "Тип туалету",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 25,
                            Index = 25,
                            Name = "Види риб",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 26,
                            Index = 26,
                            Name = "Вид наповнювача за складом",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 27,
                            Index = 27,
                            Name = "Види тварин",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 28,
                            Index = 28,
                            Name = "Види птахів",
                            ProductAttributeGroupID = 3
                        },
                        new
                        {
                            Id = 30,
                            Index = 1,
                            Name = "Гарантія виробника",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 31,
                            Index = 2,
                            Name = "Тип",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 32,
                            Index = 3,
                            Name = "Колір",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 33,
                            Index = 4,
                            Name = "Ступінь втрати слуху",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 34,
                            Index = 5,
                            Name = "Характеристики",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 35,
                            Index = 6,
                            Name = "Тип вимірювання",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 36,
                            Index = 7,
                            Name = "Різновид інгаляторів",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 37,
                            Index = 8,
                            Name = "Тип вимірювання тиску",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 38,
                            Index = 9,
                            Name = "Розмір манжети",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 39,
                            Index = 10,
                            Name = "Властивості",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 40,
                            Index = 11,
                            Name = "Зовнішній діаметр голки, мм",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 41,
                            Index = 12,
                            Name = "Довжина голки",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 42,
                            Index = 13,
                            Name = "Зовнішній діаметр голки, мм",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 43,
                            Index = 14,
                            Name = "Концентрація інсуліна (U)",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 44,
                            Index = 15,
                            Name = "Тип голки в комплекті",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 45,
                            Index = 16,
                            Name = "Кількість елементів",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 46,
                            Index = 17,
                            Name = "Термін використання",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 47,
                            Index = 18,
                            Name = "Вимірювання показників",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 49,
                            Index = 19,
                            Name = "Обсяг забору крові",
                            ProductAttributeGroupID = 4
                        },
                        new
                        {
                            Id = 50,
                            Index = 20,
                            Name = "Калібрування",
                            ProductAttributeGroupID = 4
                        });
                });

            modelBuilder.Entity("Domain.Models.ProductAttributeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDisableShow")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathToPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductAttributeGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDisableShow = true,
                            Name = "Загальні"
                        },
                        new
                        {
                            Id = 2,
                            Description = "<h1>Склад</h1><h1><br></h1><h1>Лікарська форма</h1><h1><br></h1><h1>Фармакотерапевтична група</h1><h1><br></h1><h1>Фармакологічні властивості</h1><h1><br></h1><h1>Показання</h1><h1><br></h1><h1>Протипоказання</h1><h1><br></h1><h1>Взаємодія з іншими лікарськими засобами та інші види взаємодії</h1><h1><br></h1><h1>Особливості щодо застосування</h1><h1><br></h1><h1>Спосіб застосування та дози</h1><h1><br></h1><h1>Передозування</h1><h1><br></h1><h1>Побічні ефекти</h1><h1><br></h1><h1>Термін придатності</h1><p><br></p><h1>Умови зберігання</h1><h1><br></h1><h1>Упаковка</h1><p><br></p><h1>Категорія відпуску</h1><p><br></p><h1>Виробник</h1><p><br></p><h1>Адреса</h1>",
                            DescriptionName = "Інструкція",
                            Name = "Таблетки"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Товари для тварин"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Медична техніка"
                        });
                });

            modelBuilder.Entity("Domain.Models.ProductConfirm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PharmacompanyID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductStatusID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PharmacompanyID");

                    b.HasIndex("ProductStatusID");

                    b.ToTable("ProductConfirms");
                });

            modelBuilder.Entity("Domain.Models.ProductExistAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionGetPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupID");

                    b.ToTable("ProductExistAttributes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionGetPath = "ActiveSubstance",
                            Description = "Діюча речовина",
                            GroupID = 2,
                            Name = "activeSubstanceID"
                        },
                        new
                        {
                            Id = 2,
                            ActionGetPath = "PermissionType",
                            Description = "Алергіки",
                            GroupID = 2,
                            Name = "allergiesId"
                        },
                        new
                        {
                            Id = 3,
                            ActionGetPath = "PermissionType",
                            Description = "Діабетики",
                            GroupID = 2,
                            Name = "diabeticsId"
                        },
                        new
                        {
                            Id = 4,
                            ActionGetPath = "PermissionType",
                            Description = "Годуючі мами",
                            GroupID = 2,
                            Name = "nursingMothersId"
                        },
                        new
                        {
                            Id = 5,
                            ActionGetPath = "PermissionType",
                            Description = "Дорослі",
                            GroupID = 2,
                            Name = "adultsId"
                        },
                        new
                        {
                            Id = 6,
                            ActionGetPath = "PermissionType",
                            Description = "Вагітні",
                            GroupID = 2,
                            Name = "pregnantId"
                        },
                        new
                        {
                            Id = 7,
                            ActionGetPath = "PermissionType",
                            Description = "Діти",
                            GroupID = 2,
                            Name = "childrenId"
                        },
                        new
                        {
                            Id = 8,
                            ActionGetPath = "PermissionType",
                            Description = "Водії",
                            GroupID = 2,
                            Name = "driversId"
                        });
                });

            modelBuilder.Entity("Domain.Models.ProductPriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HistoryDateId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryDateId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPriceHistory");
                });

            modelBuilder.Entity("Domain.Models.ProductProperty", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("AttributeID")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductID", "AttributeID");

                    b.HasIndex("AttributeID");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            ProductID = 5,
                            AttributeID = 30,
                            Value = "3 роки"
                        },
                        new
                        {
                            ProductID = 6,
                            AttributeID = 30,
                            Value = "3 роки"
                        },
                        new
                        {
                            ProductID = 7,
                            AttributeID = 32,
                            Value = "Білий"
                        },
                        new
                        {
                            ProductID = 8,
                            AttributeID = 32,
                            Value = "Чорний"
                        },
                        new
                        {
                            ProductID = 7,
                            AttributeID = 38,
                            Value = "1.5 л"
                        },
                        new
                        {
                            ProductID = 8,
                            AttributeID = 38,
                            Value = "2 л"
                        },
                        new
                        {
                            ProductID = 7,
                            AttributeID = 33,
                            Value = "Незначна"
                        },
                        new
                        {
                            ProductID = 7,
                            AttributeID = 20,
                            Value = "Медичний"
                        },
                        new
                        {
                            ProductID = 8,
                            AttributeID = 20,
                            Value = "Медичний"
                        },
                        new
                        {
                            ProductID = 8,
                            AttributeID = 46,
                            Value = "24 місяці"
                        },
                        new
                        {
                            ProductID = 9,
                            AttributeID = 5,
                            Value = "Додаткові функції для першої допомоги"
                        },
                        new
                        {
                            ProductID = 10,
                            AttributeID = 5,
                            Value = "Одноразова"
                        },
                        new
                        {
                            ProductID = 9,
                            AttributeID = 21,
                            Value = "Білий"
                        },
                        new
                        {
                            ProductID = 10,
                            AttributeID = 21,
                            Value = "Синій"
                        },
                        new
                        {
                            ProductID = 10,
                            AttributeID = 49,
                            Value = "5 мл"
                        },
                        new
                        {
                            ProductID = 10,
                            AttributeID = 50,
                            Value = "Не потребує калібрування"
                        },
                        new
                        {
                            ProductID = 11,
                            AttributeID = 47,
                            Value = "Лікування грипу"
                        },
                        new
                        {
                            ProductID = 12,
                            AttributeID = 47,
                            Value = "Імунітет"
                        },
                        new
                        {
                            ProductID = 11,
                            AttributeID = 13,
                            Value = "Для дорослих"
                        },
                        new
                        {
                            ProductID = 12,
                            AttributeID = 13,
                            Value = "Для всієї родини"
                        },
                        new
                        {
                            ProductID = 11,
                            AttributeID = 50,
                            Value = "Не потребує калібрування"
                        },
                        new
                        {
                            ProductID = 12,
                            AttributeID = 50,
                            Value = "Не потребує калібрування"
                        });
                });

            modelBuilder.Entity("Domain.Models.ProductStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "rgba(52, 199, 89, 1)",
                            Status = "Підтверджено"
                        },
                        new
                        {
                            Id = 2,
                            Color = "rgba(255, 149, 0, 1)",
                            Status = "На розгляді"
                        },
                        new
                        {
                            Id = 3,
                            Color = "rgba(255, 59, 48, 1)",
                            Status = "Відхилено"
                        });
                });

            modelBuilder.Entity("Domain.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReservedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToGetReservationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StatusID");

                    b.HasIndex("UserID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Domain.Models.ReservationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReservationStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "В очікуванні"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Підтверджено"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Скасовано"
                        },
                        new
                        {
                            Id = 4,
                            Status = "Завершено"
                        });
                });

            modelBuilder.Entity("Domain.Models.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Series");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Some desc",
                            Title = "Some title"
                        });
                });

            modelBuilder.Entity("Domain.Models.SimilarProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SimilarBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SimilarProductGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Смаки Аскорбінок",
                            SimilarBy = "Смак"
                        });
                });

            modelBuilder.Entity("Domain.Models.SimilarProductItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ProductID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("SimilarProductGroupID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.HasIndex("SimilarProductGroupID");

                    b.ToTable("SimilarProductItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductID = 1,
                            SimilarProductGroupID = 1,
                            Title = "Апельсин"
                        },
                        new
                        {
                            Id = 2,
                            ProductID = 2,
                            SimilarProductGroupID = 1,
                            Title = "Манго"
                        },
                        new
                        {
                            Id = 3,
                            ProductID = 3,
                            SimilarProductGroupID = 1,
                            Title = "Полуниця"
                        },
                        new
                        {
                            Id = 4,
                            ProductID = 4,
                            SimilarProductGroupID = 1,
                            Title = "Тутті-фруті"
                        });
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PharmacyUser", b =>
                {
                    b.Property<int>("FavPharmaciesId")
                        .HasColumnType("int");

                    b.Property<string>("FavUsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FavPharmaciesId", "FavUsersId");

                    b.HasIndex("FavUsersId");

                    b.ToTable("PharmacyUser");
                });

            modelBuilder.Entity("ProductUser", b =>
                {
                    b.Property<int>("FavProductsId")
                        .HasColumnType("int");

                    b.Property<string>("FavUsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FavProductsId", "FavUsersId");

                    b.HasIndex("FavUsersId");

                    b.ToTable("ProductUser");
                });

            modelBuilder.Entity("Domain.Models.Medicine", b =>
                {
                    b.HasBaseType("Domain.Models.Product");

                    b.Property<int>("ActiveSubstanceID")
                        .HasColumnType("int");

                    b.Property<int?>("AdultsID")
                        .HasColumnType("int");

                    b.Property<int?>("AllergiesID")
                        .HasColumnType("int");

                    b.Property<int?>("ChildrenID")
                        .HasColumnType("int");

                    b.Property<int?>("DiabeticsID")
                        .HasColumnType("int");

                    b.Property<int?>("DriversID")
                        .HasColumnType("int");

                    b.Property<int?>("NursingMothersID")
                        .HasColumnType("int");

                    b.Property<int?>("PregnantID")
                        .HasColumnType("int");

                    b.HasIndex("ActiveSubstanceID");

                    b.HasIndex("AdultsID");

                    b.HasIndex("AllergiesID");

                    b.HasIndex("ChildrenID");

                    b.HasIndex("DiabeticsID");

                    b.HasIndex("DriversID");

                    b.HasIndex("NursingMothersID");

                    b.HasIndex("PregnantID");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandID = 3,
                            CategoryID = 6,
                            Description = "...",
                            ManufacturerID = 3,
                            PathToPhoto = "/images/product/Аскорбінка 1.webp",
                            ProductAttributeGroupID = 2,
                            SeriesID = 1,
                            ShortDescription = "таблетки зі смак. апельсину по 25 мг №10 в етикет.",
                            Title = "Аскорбінка-КВ",
                            ActiveSubstanceID = 1
                        },
                        new
                        {
                            Id = 2,
                            BrandID = 3,
                            CategoryID = 6,
                            Description = "..",
                            ManufacturerID = 3,
                            PathToPhoto = "/images/product/Аскорбінка 2.webp",
                            ProductAttributeGroupID = 2,
                            SeriesID = 1,
                            ShortDescription = "таблетки зі смак. манго по 25 мг №10 в етикет.",
                            Title = "Аскорбінка-КВ",
                            ActiveSubstanceID = 1
                        },
                        new
                        {
                            Id = 3,
                            BrandID = 3,
                            CategoryID = 6,
                            Description = "..",
                            ManufacturerID = 3,
                            PathToPhoto = "/images/product/Аскорбінка 3.jpg",
                            ProductAttributeGroupID = 2,
                            SeriesID = 1,
                            ShortDescription = "таблетки зі смак. полуниці по 25 мг №10 в етикет.",
                            Title = "Аскорбінка-КВ",
                            ActiveSubstanceID = 1
                        },
                        new
                        {
                            Id = 4,
                            BrandID = 3,
                            CategoryID = 6,
                            Description = "..",
                            ManufacturerID = 3,
                            PathToPhoto = "/images/product/Аскорбінка 4.jpg",
                            ProductAttributeGroupID = 2,
                            SeriesID = 1,
                            ShortDescription = "таблетки зі смак. тутті-фруті по 25 мг №10 в етикет.",
                            Title = "Аскорбінка-КВ",
                            ActiveSubstanceID = 1
                        });
                });

            modelBuilder.Entity("ConcreteProductReservation", b =>
                {
                    b.HasOne("Domain.Models.ConcreteProduct", null)
                        .WithMany()
                        .HasForeignKey("ConcreteProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Reservation", null)
                        .WithMany()
                        .HasForeignKey("ReservationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Brand", b =>
                {
                    b.HasOne("Domain.Models.Country", "CountryBrand")
                        .WithMany()
                        .HasForeignKey("CountryBrandID");

                    b.Navigation("CountryBrand");
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.HasOne("Domain.Models.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryID");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Domain.Models.ConcreteProduct", b =>
                {
                    b.HasOne("Domain.Models.Pharmacy", "Pharmacy")
                        .WithMany("ConcreteProducts")
                        .HasForeignKey("PharmacyID");

                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany("ConcreteProducts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Models.Manufacturer", b =>
                {
                    b.HasOne("Domain.Models.Country", "CountryManufacture")
                        .WithMany()
                        .HasForeignKey("CountryManufactureID");

                    b.Navigation("CountryManufacture");
                });

            modelBuilder.Entity("Domain.Models.Pharmacy", b =>
                {
                    b.HasOne("Domain.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.PharmaCompany", "PharmaCompany")
                        .WithMany()
                        .HasForeignKey("PharmaCompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "User")
                        .WithOne("Pharmacy")
                        .HasForeignKey("Domain.Models.Pharmacy", "UserID");

                    b.Navigation("City");

                    b.Navigation("PharmaCompany");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.HasOne("Domain.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandID");

                    b.HasOne("Domain.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID");

                    b.HasOne("Domain.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerID");

                    b.HasOne("Domain.Models.ProductAttributeGroup", "ProductAttributeGroup")
                        .WithMany()
                        .HasForeignKey("ProductAttributeGroupID");

                    b.HasOne("Domain.Models.ProductConfirm", "ProductConfirm")
                        .WithOne("Product")
                        .HasForeignKey("Domain.Models.Product", "ProductConfirmID");

                    b.HasOne("Domain.Models.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesID");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Manufacturer");

                    b.Navigation("ProductAttributeGroup");

                    b.Navigation("ProductConfirm");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Domain.Models.ProductAttribute", b =>
                {
                    b.HasOne("Domain.Models.ProductAttributeGroup", "ProductAttributeGroup")
                        .WithMany("AttributesInGroup")
                        .HasForeignKey("ProductAttributeGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductAttributeGroup");
                });

            modelBuilder.Entity("Domain.Models.ProductConfirm", b =>
                {
                    b.HasOne("Domain.Models.PharmaCompany", "PharmaCompany")
                        .WithMany()
                        .HasForeignKey("PharmacompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.ProductStatus", "ProductStatus")
                        .WithMany()
                        .HasForeignKey("ProductStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PharmaCompany");

                    b.Navigation("ProductStatus");
                });

            modelBuilder.Entity("Domain.Models.ProductExistAttribute", b =>
                {
                    b.HasOne("Domain.Models.ProductAttributeGroup", "AttributeGroup")
                        .WithMany("ExistAttributes")
                        .HasForeignKey("GroupID");

                    b.Navigation("AttributeGroup");
                });

            modelBuilder.Entity("Domain.Models.ProductPriceHistory", b =>
                {
                    b.HasOne("Domain.Models.HistoryDate", "HistoryDate")
                        .WithMany("PriceHistory")
                        .HasForeignKey("HistoryDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany("PriceHistory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HistoryDate");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Models.ProductProperty", b =>
                {
                    b.HasOne("Domain.Models.ProductAttribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany("Properties")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Models.Reservation", b =>
                {
                    b.HasOne("Domain.Models.ReservationStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.SimilarProductItem", b =>
                {
                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany("SimilarProductItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.SimilarProductGroup", "SimilarProductGroup")
                        .WithMany("Similar")
                        .HasForeignKey("SimilarProductGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SimilarProductGroup");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PharmacyUser", b =>
                {
                    b.HasOne("Domain.Models.Pharmacy", null)
                        .WithMany()
                        .HasForeignKey("FavPharmaciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("FavUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductUser", b =>
                {
                    b.HasOne("Domain.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("FavProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("FavUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Medicine", b =>
                {
                    b.HasOne("Domain.Models.ActiveSubstance", "ActiveSubstance")
                        .WithMany("Medicines")
                        .HasForeignKey("ActiveSubstanceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.PermissionType", "Adults")
                        .WithMany()
                        .HasForeignKey("AdultsID");

                    b.HasOne("Domain.Models.PermissionType", "Allergies")
                        .WithMany()
                        .HasForeignKey("AllergiesID");

                    b.HasOne("Domain.Models.PermissionType", "Children")
                        .WithMany()
                        .HasForeignKey("ChildrenID");

                    b.HasOne("Domain.Models.PermissionType", "Diabetics")
                        .WithMany()
                        .HasForeignKey("DiabeticsID");

                    b.HasOne("Domain.Models.PermissionType", "Drivers")
                        .WithMany()
                        .HasForeignKey("DriversID");

                    b.HasOne("Domain.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("Domain.Models.Medicine", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.PermissionType", "NursingMothers")
                        .WithMany()
                        .HasForeignKey("NursingMothersID");

                    b.HasOne("Domain.Models.PermissionType", "Pregnant")
                        .WithMany()
                        .HasForeignKey("PregnantID");

                    b.Navigation("ActiveSubstance");

                    b.Navigation("Adults");

                    b.Navigation("Allergies");

                    b.Navigation("Children");

                    b.Navigation("Diabetics");

                    b.Navigation("Drivers");

                    b.Navigation("NursingMothers");

                    b.Navigation("Pregnant");
                });

            modelBuilder.Entity("Domain.Models.ActiveSubstance", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Domain.Models.HistoryDate", b =>
                {
                    b.Navigation("PriceHistory");
                });

            modelBuilder.Entity("Domain.Models.Pharmacy", b =>
                {
                    b.Navigation("ConcreteProducts");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Navigation("ConcreteProducts");

                    b.Navigation("PriceHistory");

                    b.Navigation("Properties");

                    b.Navigation("SimilarProductItems");
                });

            modelBuilder.Entity("Domain.Models.ProductAttributeGroup", b =>
                {
                    b.Navigation("AttributesInGroup");

                    b.Navigation("ExistAttributes");
                });

            modelBuilder.Entity("Domain.Models.ProductConfirm", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Models.SimilarProductGroup", b =>
                {
                    b.Navigation("Similar");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("Pharmacy");
                });
#pragma warning restore 612, 618
        }
    }
}
